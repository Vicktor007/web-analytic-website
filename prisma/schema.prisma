// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum plan {
  FREE
  PRO
}

enum Platform {
  DISCORD
  TELEGRAM
}

model User {
  id String @id @default(cuid())
  externalId String? @unique

  quotaLimit Int
  plan  plan @default(FREE)

  email String @unique
  apiKey String @unique @default(cuid())
   preferredPlatform Platform   @default(DISCORD) 
  discordId String?
  telegramChatId    String? 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  EventCategories EventCategory[]

  @@index([email, apiKey])
  events Event[]
  Quota Quota[]
  Website Website[]
}

model EventCategory {
  id String @id @default(cuid())
  name String
  color Int
  emoji String?

  user User @relation(fields: [userId], references: [id])
  userId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([name, userId])
  events Event[]

  website Website? @relation(fields: [website_id], references: [id])
  website_id String?
}

enum DeliveryStatus {
  PENDING
  DELIVERED
  FAILED
}

model Website {
  id String @id @default(cuid())
  domain String

  user User @relation(fields: [userId], references: [id])
  userId String

   createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt


  EventCategory EventCategory[]

  Event Event[]

  @@unique([userId, id])

}

model website_page_views {
    id String @id @default(cuid())

    domain String

    page_visited String

    createdAt DateTime @default(now())
}

model website_visits {
    id String @id @default(cuid())

    domain String

    source String

    createdAt DateTime @default(now())

}

model Event {
  id String @id @default(cuid())

  formattedMessage String

  user User @relation(fields: [userId], references: [id])
  userId String

  name String
  fields Json

  deliveryStatus DeliveryStatus @default(PENDING)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  EventCategory EventCategory? @relation(fields: [eventCategoryId], references: [id])
  eventCategoryId String?

  website Website? @relation(fields: [website_id], references: [id])
  website_id String?


  @@index([createdAt])
}

model Quota {
  id String @id @default(cuid())
  user User @relation(fields: [userId], references: [id])
  userId String @unique

  year Int
  month Int
  count Int @default(0)

  updatedAt DateTime @updatedAt
}
